{"ast":null,"code":"var _jsxFileName = \"/Users/arvindtatiparti/Desktop/react/HospitalManagement/src/Components/AmbulanceDetails.js\";\nimport React, { Component } from 'react';\nimport Modal from 'react-modal';\nexport class AmbulanceDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      PatientData: [],\n      CurrentPage: 1,\n      PatientPerPage: 10,\n      PageNumbers: [],\n      IsModalOpen: false,\n      patientSelected: {}\n    };\n    this.handlePage = this.handlePage.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.patientDetailsUpdate = {};\n    this.handlePatient = this.handlePatient.bind(this);\n    this.check = this.check.bind(this);\n  }\n\n  check(val) {\n    if (val == 0) {\n      return \"Available\";\n    }\n\n    return \"Busy\";\n  }\n\n  openModal(event) {\n    var idUpdate = event.target.id;\n    var pSelected;\n    this.state.PatientData.forEach(patient => {\n      if (patient.id == idUpdate) {\n        pSelected = patient;\n        return 0;\n      }\n    });\n    this.patientDetailsUpdate = pSelected;\n    this.setState({\n      IsModalOpen: true,\n      patientSelected: pSelected\n    });\n  }\n\n  closeModal() {\n    this.setState({\n      IsModalOpen: false\n    });\n  }\n\n  componentWillMount() {\n    const RenderPageNumbers = [];\n    fetch('http://localhost:3000/ambulances', {\n      method: 'GET'\n    }).then(response => {\n      response.json().then(data => this.setState({\n        PatientData: data\n      }, () => {\n        console.log(this.state);\n\n        for (let i = 1; i <= Math.ceil(this.state.PatientData.length / this.state.PatientPerPage); i++) {\n          RenderPageNumbers.push(i);\n        }\n\n        this.setState({\n          PageNumbers: RenderPageNumbers\n        }, () => {\n          console.log('PageNumber ', this.state);\n        });\n      }));\n    });\n  }\n\n  handlePage(event) {\n    var page = event.target.id;\n    this.setState({\n      CurrentPage: page\n    });\n  }\n\n  handlePatient(event) {\n    event.persist();\n    const name = event.target.name;\n    this.patientDetailsUpdate = { ...this.patientDetailsUpdate,\n      [name]: event.target.value\n    };\n  }\n\n  render() {\n    const indexOfLastData = this.state.CurrentPage * this.state.PatientPerPage;\n    const indexOfFirstData = indexOfLastData - this.state.PatientPerPage;\n    const currentPagePatient = this.state.PatientData.slice(indexOfFirstData, indexOfLastData);\n    let currentTime = new Date();\n    let hours = currentTime.getHours();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"AmbulanceID\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Availability\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, currentPagePatient.map(patient => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, patient.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.check(patient.availability)));\n    }))), React.createElement(\"ul\", {\n      className: \"PaginationList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.PageNumbers.map(number => {\n      return React.createElement(\"li\", {\n        id: number,\n        key: number,\n        className: \"Pagination\",\n        onClick: this.handlePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, number);\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/arvindtatiparti/Desktop/react/HospitalManagement/src/Components/AmbulanceDetails.js"],"names":["React","Component","Modal","AmbulanceDetails","constructor","props","state","PatientData","CurrentPage","PatientPerPage","PageNumbers","IsModalOpen","patientSelected","handlePage","bind","openModal","closeModal","patientDetailsUpdate","handlePatient","check","val","event","idUpdate","target","id","pSelected","forEach","patient","setState","componentWillMount","RenderPageNumbers","fetch","method","then","response","json","data","console","log","i","Math","ceil","length","push","page","persist","name","value","render","indexOfLastData","indexOfFirstData","currentPagePatient","slice","currentTime","Date","hours","getHours","map","availability","number"],"mappings":"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","sourcesContent":["import React,{Component}  from 'react';\nimport Modal from 'react-modal';\n\nexport class AmbulanceDetails extends Component{\n    constructor(props){\n        super(props);\n        this.state={PatientData:[],CurrentPage:1,PatientPerPage:10,PageNumbers:[],IsModalOpen:false,patientSelected:{}};\n        this.handlePage=this.handlePage.bind(this);\n        this.openModal=this.openModal.bind(this);\n        this.closeModal=this.closeModal.bind(this);\n        this.patientDetailsUpdate={};\n        this.handlePatient=this.handlePatient.bind(this);\n        this.check=this.check.bind(this);\n    }\n\n    check(val){\n        if(val==0){\n            return(\"Available\");\n        }\n        return(\"Busy\");\n    }\n\n    openModal(event){\n        var idUpdate=event.target.id;\n        var pSelected;\n        this.state.PatientData.forEach(patient=>{\n            if(patient.id==idUpdate){\n                pSelected=patient;\n                return 0;\n            }\n        });\n        this.patientDetailsUpdate=pSelected;\n        this.setState({IsModalOpen:true,patientSelected:pSelected});\n    }\n\n    closeModal(){\n        this.setState({IsModalOpen:false});\n    }\n\n    componentWillMount(){\n        const RenderPageNumbers=[];\n        fetch('http://localhost:3000/ambulances',{\n            method : 'GET'\n        }).then((response)=>{\n                response.json().then(data=>this.setState({PatientData:data},()=>{console.log(this.state);\n                    for(let i=1;i<=Math.ceil(this.state.PatientData.length/this.state.PatientPerPage);i++){\n                        RenderPageNumbers.push(i);\n                    }\n                    this.setState({PageNumbers:RenderPageNumbers},()=>{console.log('PageNumber ',this.state);});\n                    }));\n        });\n    }\n\n    handlePage(event){\n        var page=event.target.id;\n        this.setState({CurrentPage: page});\n    }\n\n    handlePatient(event){\n        event.persist();\n        const name=event.target.name;\n        this.patientDetailsUpdate={...this.patientDetailsUpdate,    \n            [name] : event.target.value\n        }\n    }\n\n\n    render(){\n        const indexOfLastData=this.state.CurrentPage*this.state.PatientPerPage;\n        const indexOfFirstData=indexOfLastData-this.state.PatientPerPage;\n        const currentPagePatient=this.state.PatientData.slice(indexOfFirstData,indexOfLastData);\n        let currentTime =new Date();\n        let hours=currentTime.getHours();\n    return(\n        <div>\n            <table>\n                <thead>\n                <tr>\n                <th>AmbulanceID</th>\n                <th>Availability</th>\n                </tr>\n                </thead>\n                <tbody>\n                {currentPagePatient.map((patient)=>{return (\n                    <tr>\n                        <td>{patient.id}</td>\n                        <td>{(this.check(patient.availability))}</td>\n                    </tr>\n                    \n                );})}\n                </tbody>\n            </table>\n            <ul className='PaginationList'>\n                {this.state.PageNumbers.map(number=>{\n                 return(\n                    <li id={number} key={number} className=\"Pagination\" onClick={this.handlePage}>{number}</li>\n            )\n            })}\n            \n            </ul>\n        </div>\n    )\n    }\n}"]},"metadata":{},"sourceType":"module"}