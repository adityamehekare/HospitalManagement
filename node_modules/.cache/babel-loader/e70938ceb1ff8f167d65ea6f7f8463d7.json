{"ast":null,"code":"var _jsxFileName = \"/Users/arvindtatiparti/Desktop/react/HospitalManagement/src/Components/PatientDetails.js\";\nimport React, { Component } from 'react';\nimport Rater from 'react-rater';\nimport StarRatings from 'react-star-ratings';\nimport 'react-rater/lib/react-rater.css';\nimport '../CSS/PatientDetails.css';\nimport Modal from 'react-modal';\nimport { AddPatient } from './AddPatients'; //This Component Contains the PatientDtails \n\nexport class PatientDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      PatientData: [],\n      CurrentPage: 1,\n      PatientPerPage: 10,\n      PageNumbers: [],\n      IsModalOpen: false,\n      patientSelected: {}\n    };\n    this.handlePage = this.handlePage.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.check = this.check.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.checkslot = this.checkslot.bind(this);\n    this.UpdatePatientDetails = this.UpdatePatientDetails.bind(this);\n    this.patientDetailsUpdate = {};\n    this.handlePatient = this.handlePatient.bind(this);\n  } //openModal Function is used to handling the logic at the time admin want to update the patient Details\n\n\n  openModal(event) {\n    var idUpdate = event.target.id;\n    var pSelected;\n    this.state.PatientData.forEach(patient => {\n      if (patient.id == idUpdate) {\n        pSelected = patient;\n        return 0;\n      }\n    });\n    this.patientDetailsUpdate = pSelected;\n    this.setState({\n      IsModalOpen: true,\n      patientSelected: pSelected\n    });\n  } //closeModal is responsible for only closing the modal after updating the Details\n\n\n  closeModal() {\n    this.setState({\n      IsModalOpen: false\n    });\n  }\n\n  checkslot(val) {\n    // let v;\n    if (val == 0) return 'Book Appointment';\n    return 'No Booking';\n  }\n\n  check(start, end, val) {\n    // let v;\n    if (val >= start && val <= end) return 'Yes';\n    return 'No';\n  } //Before the component it is necessary to fetch the details of the PatientDetails \n\n\n  componentWillMount() {\n    const RenderPageNumbers = [];\n    fetch('http://localhost:3000/doctors', {\n      method: 'GET'\n    }).then(response => {\n      response.json().then(data => this.setState({\n        PatientData: data\n      }, () => {\n        console.log(this.state);\n\n        for (let i = 1; i <= Math.ceil(this.state.PatientData.length / this.state.PatientPerPage); i++) {\n          RenderPageNumbers.push(i);\n        }\n\n        this.setState({\n          PageNumbers: RenderPageNumbers\n        }, () => {\n          console.log('PageNumber ', this.state);\n        });\n      }));\n    });\n  } //responsible for hanlding the pagination\n\n\n  handlePage(event) {\n    var page = event.target.id;\n    this.setState({\n      CurrentPage: page\n    });\n  } //responsible for hanlding the userData **Improved the way of re-rendering the component by not directly updating the state at each Change just push all the details in an temporary object and when the user finally submits the details then only use setState copy the whole object in state **\n\n\n  handlePatient(event) {\n    event.persist();\n    const name = event.target.name;\n    this.patientDetailsUpdate = { ...this.patientDetailsUpdate,\n      [name]: event.target.value\n    };\n  } //Logic to update the patientDetails \n\n\n  UpdatePatientDetails(event) {\n    this.closeModal();\n    var id = this.patientDetailsUpdate.id;\n    var object = {\n      \"PatientName\": this.patientDetailsUpdate.PatientName,\n      \"PatientAge\": this.patientDetailsUpdate.PatientAge,\n      \"PatientProblem\": this.patientDetailsUpdate.PatientProblem,\n      \"PatientPrescription\": this.patientDetailsUpdate.PatientPrescription\n    };\n    fetch('http://localhost:3000/patients/' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(object)\n    }).then(response => {\n      this.componentWillMount();\n    });\n  }\n\n  render() {\n    const indexOfLastData = this.state.CurrentPage * this.state.PatientPerPage;\n    const indexOfFirstData = indexOfLastData - this.state.PatientPerPage;\n    const currentPagePatient = this.state.PatientData.slice(indexOfFirstData, indexOfLastData);\n    let currentTime = new Date();\n    let hours = currentTime.getHours();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      style: {\n        color: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"RatingCOMPAFS\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Sno\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"DoctorName\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Speciality\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Availability\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Appointment\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Current Rating   \"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, currentPagePatient.map(patient => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(StarRatings, {\n        starSpacing: \"2px\",\n        starDimension: \"17px\",\n        changeRating: value => {\n          // setValue(newValue);\n          var s = patient.rating * patient.persons + value;\n          patient.persons += 1;\n          patient.rating = (s / patient.persons).toFixed(2);\n          fetch(\"http://localhost:3000/doctors/\" + patient.id, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(patient)\n          }).then(response => {\n            console.log(response);\n            this.componentWillMount();\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, patient.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, patient.DoctorName), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, patient.Speciality), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, this.check(patient.start, patient.end, hours)), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: patient.id,\n        onClick: () => {\n          if (patient.slot1 == 0) {\n            patient.slot1 = 1;\n            fetch(\"http://localhost:3000/doctors/\" + patient.id, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(patient)\n            }).then(response => {\n              console.log(response);\n              this.componentWillMount();\n            });\n          } else {\n            alert(\"Not Able to add\");\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.checkslot(patient.slot1))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: patient.id,\n        onClick: () => {\n          if (patient.slot2 == 0) {\n            patient.slot2 = 1;\n            fetch(\"http://localhost:3000/doctors/\" + patient.id, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(patient)\n            }).then(response => {\n              console.log(response);\n              this.componentWillMount();\n            });\n          } else {\n            alert(\"Not Able to add\");\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, this.checkslot(patient.slot2))), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, patient.rating));\n    }), React.createElement(Modal, {\n      isOpen: this.state.IsModalOpen,\n      onRequestClose: this.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Update Patient Details\"), React.createElement(\"button\", {\n      onClick: this.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"close\"), React.createElement(AddPatient, {\n      title: \"Update Details of Patients\",\n      pObject: this.state.patientSelected,\n      handlerInput: this.handlePatient,\n      addDetails: this.UpdatePatientDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })))), React.createElement(\"ul\", {\n      className: \"PaginationList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, this.state.PageNumbers.map(number => {\n      return React.createElement(\"li\", {\n        id: number,\n        key: number,\n        className: \"Pagination\",\n        onClick: this.handlePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, number);\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/arvindtatiparti/Desktop/react/HospitalManagement/src/Components/PatientDetails.js"],"names":["React","Component","Rater","StarRatings","Modal","AddPatient","PatientDetails","constructor","props","state","PatientData","CurrentPage","PatientPerPage","PageNumbers","IsModalOpen","patientSelected","handlePage","bind","openModal","check","closeModal","checkslot","UpdatePatientDetails","patientDetailsUpdate","handlePatient","event","idUpdate","target","id","pSelected","forEach","patient","setState","val","start","end","componentWillMount","RenderPageNumbers","fetch","method","then","response","json","data","console","log","i","Math","ceil","length","push","page","persist","name","value","object","PatientName","PatientAge","PatientProblem","PatientPrescription","headers","body","JSON","stringify","render","indexOfLastData","indexOfFirstData","currentPagePatient","slice","currentTime","Date","hours","getHours","color","map","s","rating","persons","toFixed","DoctorName","Speciality","slot1","alert","slot2","number"],"mappings":"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","sourcesContent":["import React,{Component}  from 'react';\nimport Rater from 'react-rater';\nimport StarRatings from 'react-star-ratings';\nimport 'react-rater/lib/react-rater.css';\n\nimport '../CSS/PatientDetails.css';\nimport Modal from 'react-modal';\nimport { AddPatient } from './AddPatients';\n\n\n//This Component Contains the PatientDtails \nexport class PatientDetails extends Component{\n    constructor(props){\n        super(props);\n        this.state={PatientData:[],CurrentPage:1,PatientPerPage:10,PageNumbers:[],IsModalOpen:false,patientSelected:{}};\n        this.handlePage=this.handlePage.bind(this);\n        this.openModal=this.openModal.bind(this);\n        this.check=this.check.bind(this);\n        this.closeModal=this.closeModal.bind(this);\n        this.checkslot=this.checkslot.bind(this);\n        this.UpdatePatientDetails=this.UpdatePatientDetails.bind(this);\n        this.patientDetailsUpdate={};\n        this.handlePatient=this.handlePatient.bind(this);\n\n    }\n    //openModal Function is used to handling the logic at the time admin want to update the patient Details\n    openModal(event){\n        var idUpdate=event.target.id;\n        var pSelected;\n        this.state.PatientData.forEach(patient=>{\n            if(patient.id==idUpdate){\n                pSelected=patient;\n                return 0;\n            }\n        });\n        this.patientDetailsUpdate=pSelected;\n        this.setState({IsModalOpen:true,patientSelected:pSelected});\n    }\n    //closeModal is responsible for only closing the modal after updating the Details\n    closeModal(){\n        this.setState({IsModalOpen:false});\n    }\n    checkslot(val)\n{\n    \n    // let v;\n    if(val==0)\n        return('Book Appointment');\n    return('No Booking');\n}\ncheck(start,end,val)\n{\n    \n    // let v;\n    if(val>=start && val<=end)\n        return('Yes');\n    return('No');\n}\n    //Before the component it is necessary to fetch the details of the PatientDetails \n    componentWillMount(){\n        const RenderPageNumbers=[];\n        fetch('http://localhost:3000/doctors',{\n            method : 'GET'\n        }).then((response)=>{\n                response.json().then(data=>this.setState({PatientData:data},()=>{console.log(this.state);\n                    for(let i=1;i<=Math.ceil(this.state.PatientData.length/this.state.PatientPerPage);i++){\n                        RenderPageNumbers.push(i);\n                    }\n                    this.setState({PageNumbers:RenderPageNumbers},()=>{console.log('PageNumber ',this.state);});\n                    }));\n        });\n    }\n    //responsible for hanlding the pagination\n    handlePage(event){\n        var page=event.target.id;\n        this.setState({CurrentPage: page});\n    }\n\n    //responsible for hanlding the userData **Improved the way of re-rendering the component by not directly updating the state at each Change just push all the details in an temporary object and when the user finally submits the details then only use setState copy the whole object in state **\n    handlePatient(event){\n        event.persist();\n        const name=event.target.name;\n        this.patientDetailsUpdate={...this.patientDetailsUpdate,    \n            [name] : event.target.value\n        }\n        }\n    \n    //Logic to update the patientDetails \n    UpdatePatientDetails(event){\n        this.closeModal();\n        var id=this.patientDetailsUpdate.id;\n        var object={\"PatientName\":this.patientDetailsUpdate.PatientName,\"PatientAge\":this.patientDetailsUpdate.PatientAge,\"PatientProblem\":this.patientDetailsUpdate.PatientProblem,\"PatientPrescription\":this.patientDetailsUpdate.PatientPrescription}\n        fetch('http://localhost:3000/patients/'+id,{\n            method: 'PUT',\n            headers :{\n                'Content-Type': 'application/json' \n                },\n            body : JSON.stringify(object)\n        }).then((response)=>{\n            this.componentWillMount();\n            \n\n        })\n    }\n\n   \n    render(){\n        const indexOfLastData=this.state.CurrentPage*this.state.PatientPerPage;\n        const indexOfFirstData=indexOfLastData-this.state.PatientPerPage;\n        const currentPagePatient=this.state.PatientData.slice(indexOfFirstData,indexOfLastData);\n        let currentTime =new Date();\n        let hours=currentTime.getHours();\n    return(\n        <div>\n            <table>\n                <thead>\n                <tr>\n                <th style={{color: 'white'}}>RatingCOMPAFS</th>\n                <th>Sno</th>\n                <th>DoctorName</th>\n                <th>Speciality</th>\n                <th>Availability</th>\n                <th>Appointment</th>\n                <th>Current Rating   </th>\n                </tr>\n                </thead>\n                <tbody>\n                {currentPagePatient.map((patient)=>{return (\n                    <tr>\n                    <td><StarRatings starSpacing='2px' starDimension='17px' changeRating={(value)=>{\n\n                        \n            // setValue(newValue);\n\n            var s=(patient.rating*patient.persons+value);\n            patient.persons+=1;\n            patient.rating=(s/patient.persons).toFixed(2);\n            fetch(\"http://localhost:3000/doctors/\"+patient.id,{\n            method: 'PUT',\n            headers :{\n                'Content-Type': 'application/json' \n                },\n            body : JSON.stringify(patient)\n        }).then((response)=>{\n            console.log(response);\n            this.componentWillMount();\n        })\n                     }} /> </td>\n                        <td>{patient.id}</td>\n                        <td>{patient.DoctorName}</td>\n                       \n                        <td>{patient.Speciality}</td>\n                    \n                        <td>{(this.check(patient.start,patient.end,hours))}</td>\n                         <td><button id={patient.id} onClick={()=>{\n                            if(patient.slot1==0)\n                            {\n                                patient.slot1=1;\n                            \n                fetch(\"http://localhost:3000/doctors/\"+patient.id,{\n            method: 'PUT',\n            headers :{\n                'Content-Type': 'application/json' \n                },\n            body : JSON.stringify(patient)\n        }).then((response)=>{\n            console.log(response);\n            this.componentWillMount();\n            \n\n        })}\n        else\n        {\n            alert(\"Not Able to add\");\n        }\n                         }}>{this.checkslot(patient.slot1)}</button></td>\n                                      \n                    \n\n\n                    <td><button id={patient.id} onClick={()=>{\n                            if(patient.slot2==0)\n                            {\n                                patient.slot2=1;\n                            \n                            \n                            fetch(\"http://localhost:3000/doctors/\"+patient.id,{\n            method: 'PUT',\n            headers :{\n                'Content-Type': 'application/json' \n                },\n            body : JSON.stringify(patient)\n        }).then((response)=>{\n            console.log(response);\n            this.componentWillMount();\n            \n\n        })}\n        else\n        {\n            alert(\"Not Able to add\");\n        }\n                         }}>{this.checkslot(patient.slot2)}</button></td>\n                        <td>{patient.rating}</td>\n                         \n                    </tr>\n                    \n                );})}\n                <Modal isOpen={this.state.IsModalOpen} onRequestClose={this.closeModal}>\n                <h2>Update Patient Details</h2>\n                <button onClick={this.closeModal}>close</button>\n                <AddPatient title='Update Details of Patients' pObject={this.state.patientSelected} handlerInput={this.handlePatient} addDetails={this.UpdatePatientDetails}  />\n                </Modal>\n                </tbody>\n            </table>\n            <ul className='PaginationList'>\n                {this.state.PageNumbers.map(number=>{\n                 return(\n                    <li id={number} key={number} className=\"Pagination\" onClick={this.handlePage}>{number}</li>\n            )\n            })}\n            \n            </ul>\n        </div>\n    )\n    }\n}"]},"metadata":{},"sourceType":"module"}