{"ast":null,"code":"var _jsxFileName = \"/Users/arvindtatiparti/Desktop/react/HospitalManagement/src/Components/MedicineDetails.js\";\nimport React, { Component } from 'react';\nimport '../CSS/PatientDetails.css';\nimport Modal from 'react-modal';\nimport { AddPatient } from './AddPatients'; //This Component Contains the PatientDtails \n\nexport class MedicineDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      PatientData: [],\n      CurrentPage: 1,\n      PatientPerPage: 10,\n      PageNumbers: [],\n      IsModalOpen: false,\n      patientSelected: {}\n    };\n    this.handlePage = this.handlePage.bind(this);\n    this.openModal = this.openModal.bind(this);\n    this.check = this.check.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.checkslot = this.checkslot.bind(this);\n    this.UpdatePatientDetails = this.UpdatePatientDetails.bind(this);\n    this.patientDetailsUpdate = {};\n    this.handlePatient = this.handlePatient.bind(this);\n  } //openModal Function is used to handling the logic at the time admin want to update the patient Details\n\n\n  openModal(event) {\n    var idUpdate = event.target.id;\n    var pSelected;\n    this.state.PatientData.forEach(patient => {\n      if (patient.id == idUpdate) {\n        pSelected = patient;\n        return 0;\n      }\n    });\n    this.patientDetailsUpdate = pSelected;\n    this.setState({\n      IsModalOpen: true,\n      patientSelected: pSelected\n    });\n  } //closeModal is responsible for only closing the modal after updating the Details\n\n\n  closeModal() {\n    this.setState({\n      IsModalOpen: false\n    });\n  }\n\n  checkslot(val) {\n    // let v;\n    if (val == 0) return 'Book Appointment';\n    return 'No Booking';\n  }\n\n  check(start, end, val) {\n    // let v;\n    if (val >= start && val <= end) return 'Yes';\n    return 'No';\n  } //Before the component it is necessary to fetch the details of the PatientDetails \n\n\n  componentWillMount() {\n    const RenderPageNumbers = [];\n    fetch('http://localhost:3000/medicine', {\n      method: 'GET'\n    }).then(response => {\n      response.json().then(data => this.setState({\n        PatientData: data\n      }, () => {\n        console.log(this.state);\n\n        for (let i = 1; i <= Math.ceil(this.state.PatientData.length / this.state.PatientPerPage); i++) {\n          RenderPageNumbers.push(i);\n        }\n\n        this.setState({\n          PageNumbers: RenderPageNumbers\n        }, () => {\n          console.log('PageNumber ', this.state);\n        });\n      }));\n    });\n  } //responsible for hanlding the pagination\n\n\n  handlePage(event) {\n    var page = event.target.id;\n    this.setState({\n      CurrentPage: page\n    });\n  } //responsible for hanlding the userData **Improved the way of re-rendering the component by not directly updating the state at each Change just push all the details in an temporary object and when the user finally submits the details then only use setState copy the whole object in state **\n\n\n  handlePatient(event) {\n    event.persist();\n    const name = event.target.name;\n    this.patientDetailsUpdate = { ...this.patientDetailsUpdate,\n      [name]: event.target.value\n    };\n  } //Logic to update the patientDetails \n\n\n  UpdatePatientDetails(event) {\n    this.closeModal();\n    var id = this.patientDetailsUpdate.id;\n    var object = {\n      \"PatientName\": this.patientDetailsUpdate.PatientName,\n      \"PatientAge\": this.patientDetailsUpdate.PatientAge,\n      \"PatientProblem\": this.patientDetailsUpdate.PatientProblem,\n      \"PatientPrescription\": this.patientDetailsUpdate.PatientPrescription\n    };\n    fetch('http://localhost:3000/patients/' + id, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(object)\n    }).then(response => {\n      this.componentWillMount();\n    });\n  }\n\n  render() {\n    const indexOfLastData = this.state.CurrentPage * this.state.PatientPerPage;\n    const indexOfFirstData = indexOfLastData - this.state.PatientPerPage;\n    const currentPagePatient = this.state.PatientData.slice(indexOfFirstData, indexOfLastData);\n    let currentTime = new Date();\n    let hours = currentTime.getHours();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Sno\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"MedicineName\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Available Quantity\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Rate in INR\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, currentPagePatient.map(medicine => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, medicine.id), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, medicine.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, medicine.quantity), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, medicine.rate));\n    }))), React.createElement(\"ul\", {\n      className: \"PaginationList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.state.PageNumbers.map(number => {\n      return React.createElement(\"li\", {\n        id: number,\n        key: number,\n        className: \"Pagination\",\n        onClick: this.handlePage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, number);\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/arvindtatiparti/Desktop/react/HospitalManagement/src/Components/MedicineDetails.js"],"names":["React","Component","Modal","AddPatient","MedicineDetails","constructor","props","state","PatientData","CurrentPage","PatientPerPage","PageNumbers","IsModalOpen","patientSelected","handlePage","bind","openModal","check","closeModal","checkslot","UpdatePatientDetails","patientDetailsUpdate","handlePatient","event","idUpdate","target","id","pSelected","forEach","patient","setState","val","start","end","componentWillMount","RenderPageNumbers","fetch","method","then","response","json","data","console","log","i","Math","ceil","length","push","page","persist","name","value","object","PatientName","PatientAge","PatientProblem","PatientPrescription","headers","body","JSON","stringify","render","indexOfLastData","indexOfFirstData","currentPagePatient","slice","currentTime","Date","hours","getHours","map","medicine","quantity","rate","number"],"mappings":"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","sourcesContent":["import React,{Component}  from 'react';\nimport '../CSS/PatientDetails.css';\nimport Modal from 'react-modal';\nimport { AddPatient } from './AddPatients';\n\n\n//This Component Contains the PatientDtails \nexport class MedicineDetails extends Component{\n    constructor(props){\n        super(props);\n        this.state={PatientData:[],CurrentPage:1,PatientPerPage:10,PageNumbers:[],IsModalOpen:false,patientSelected:{}};\n        this.handlePage=this.handlePage.bind(this);\n        this.openModal=this.openModal.bind(this);\n        this.check=this.check.bind(this);\n        this.closeModal=this.closeModal.bind(this);\n        this.checkslot=this.checkslot.bind(this);\n        this.UpdatePatientDetails=this.UpdatePatientDetails.bind(this);\n        this.patientDetailsUpdate={};\n        this.handlePatient=this.handlePatient.bind(this);\n\n    }\n    //openModal Function is used to handling the logic at the time admin want to update the patient Details\n    openModal(event){\n        var idUpdate=event.target.id;\n        var pSelected;\n        this.state.PatientData.forEach(patient=>{\n            if(patient.id==idUpdate){\n                pSelected=patient;\n                return 0;\n            }\n        });\n        this.patientDetailsUpdate=pSelected;\n        this.setState({IsModalOpen:true,patientSelected:pSelected});\n    }\n    //closeModal is responsible for only closing the modal after updating the Details\n    closeModal(){\n        this.setState({IsModalOpen:false});\n    }\n    checkslot(val)\n{\n    \n    // let v;\n    if(val==0)\n        return('Book Appointment');\n    return('No Booking');\n}\ncheck(start,end,val)\n{\n    \n    // let v;\n    if(val>=start && val<=end)\n        return('Yes');\n    return('No');\n}\n    //Before the component it is necessary to fetch the details of the PatientDetails \n    componentWillMount(){\n        const RenderPageNumbers=[];\n        fetch('http://localhost:3000/medicine',{\n            method : 'GET'\n        }).then((response)=>{\n                response.json().then(data=>this.setState({PatientData:data},()=>{console.log(this.state);\n                    for(let i=1;i<=Math.ceil(this.state.PatientData.length/this.state.PatientPerPage);i++){\n                        RenderPageNumbers.push(i);\n                    }\n                    this.setState({PageNumbers:RenderPageNumbers},()=>{console.log('PageNumber ',this.state);});\n                    }));\n        });\n    }\n    //responsible for hanlding the pagination\n    handlePage(event){\n        var page=event.target.id;\n        this.setState({CurrentPage: page});\n    }\n\n    //responsible for hanlding the userData **Improved the way of re-rendering the component by not directly updating the state at each Change just push all the details in an temporary object and when the user finally submits the details then only use setState copy the whole object in state **\n    handlePatient(event){\n        event.persist();\n        const name=event.target.name;\n        this.patientDetailsUpdate={...this.patientDetailsUpdate,    \n            [name] : event.target.value\n        }\n        }\n    \n    //Logic to update the patientDetails \n    UpdatePatientDetails(event){\n        this.closeModal();\n        var id=this.patientDetailsUpdate.id;\n        var object={\"PatientName\":this.patientDetailsUpdate.PatientName,\"PatientAge\":this.patientDetailsUpdate.PatientAge,\"PatientProblem\":this.patientDetailsUpdate.PatientProblem,\"PatientPrescription\":this.patientDetailsUpdate.PatientPrescription}\n        fetch('http://localhost:3000/patients/'+id,{\n            method: 'PUT',\n            headers :{\n                'Content-Type': 'application/json' \n                },\n            body : JSON.stringify(object)\n        }).then((response)=>{\n            this.componentWillMount();\n            \n\n        })\n    }\n    render(){\n        const indexOfLastData=this.state.CurrentPage*this.state.PatientPerPage;\n        const indexOfFirstData=indexOfLastData-this.state.PatientPerPage;\n        const currentPagePatient=this.state.PatientData.slice(indexOfFirstData,indexOfLastData);\n        let currentTime =new Date();\n        let hours=currentTime.getHours();\n    return(\n        <div>\n            <table>\n                <thead>\n                <tr>\n                <th>Sno</th>\n                <th>MedicineName</th>\n                <th>Available Quantity</th>\n                <th>Rate in INR</th>\n                \n                </tr>\n                </thead>\n                <tbody>\n                {currentPagePatient.map((medicine)=>{return (\n                    <tr>\n                        <td>{medicine.id}</td>\n                        <td>{medicine.name}</td>\n                        <td>{medicine.quantity}</td>\n                       \n                        <td>{medicine.rate}</td>\n                    \n                         \n                    </tr>\n                    \n                );})}\n                \n                </tbody>\n            </table>\n            <ul className='PaginationList'>\n                {this.state.PageNumbers.map(number=>{\n                 return(\n                    <li id={number} key={number} className=\"Pagination\" onClick={this.handlePage}>{number}</li>\n            )\n            })}\n            \n            </ul>\n        </div>\n    )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}